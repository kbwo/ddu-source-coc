*ddu-source-coc.txt*	coc.nvim source for ddu.vim

Author: Kodai Kabasawa <kabaaa1126@gmail.com>
License: MIT license

CONTENTS                                                 *ddu-source-coc-contents*

Introduction    |ddu-source-coc-introduction|
Install         |ddu-source-coc-install|
Examples        |ddu-source-coc-examples|
Params          |ddu-source-coc-params|


==============================================================================
INTRODUCTION                                         *ddu-source-coc-introduction*

This source collects coc.nvim location data or symbols

==============================================================================
INSTALL                                                   *ddu-source-coc-install*

Please install below plugins.

https://github.com/Shougo/ddu.vim
https://github.com/vim-denops/denops.vim
https://github.com/Shougo/ddu-kind-file


To use the outline feature, create a JavaScript file named `coc-outline.js`
in the folder `$VIMCONFIG/coc-extensions` and paste the following code into it.

>
  const { CancellationTokenSource, workspace, languages } = require("coc.nvim");

  const DEBOUNCE_DELAY = 100;

  exports.activate = (_context) => {
    const nvim = workspace.nvim;
    const updateDocumentSymbols = async () => {
      const symbols = await getFullDocumentSymbols();
      await nvim.setVar("FullDocumentSymbols", JSON.stringify(symbols));
    };
    const requestHandler = new RequestHandler(DEBOUNCE_DELAY);
    workspace.onDidOpenTextDocument(async () => {
      await updateDocumentSymbols();
    });
    workspace.onDidChangeTextDocument(async () => {
      requestHandler.debounceRequest(async () => {
	await updateDocumentSymbols();
      });
    });
    workspace.onDidCloseTextDocument(async () => {
      await updateDocumentSymbols();
    });
    // TODO: Consider using a more efficient approach than setInterval for updating document symbols
    setInterval(async () => {
      try {
	await updateDocumentSymbols();
      } catch (error) {
	console.error("Failed to update document symbols:", error);
      }
    }, DEBOUNCE_DELAY);
  };

  class RequestHandler {
    timeoutId = null;
    delay;

    constructor(delay) {
      this.delay = delay;
    }

    debounceRequest(callback) {
      if (this.timeoutId !== null) {
	clearTimeout(this.timeoutId);
      }

      this.timeoutId = setTimeout(() => {
	callback();
	this.timeoutId = null;
      }, this.delay);
    }
  }

  async function getFullDocumentSymbols() {
    const document = await workspace.document;
    const source = new CancellationTokenSource();
    const token = source.token;
    return languages.getDocumentSymbol(document.textDocument, token);
  }



==============================================================================
EXAMPLES                                                 *ddu-source-coc-examples*

>

  " Add command for coc-symbols list with ddu
  command! Symbols call ddu#start({ 'sources': [{'name': 'coc-symbols'}] })
  " Add command for coc-diagnostics list with ddu
  command! Outline call ddu#start({ 'uiParams': {'ff': {'displayTree': v:true}}, 'sources': [{'name': 'coc-outline'}] })

  " Start ddu for coc-location. Coc.nvim feature like references, difinition
  with ddu will be available.
  autocmd! User CocLocationsChange call ddu#start({
      \   'ui': 'ff',
      \   'sources': [{'name': 'coc-locations', 'params': {}}],
      \   'sourceOptions': {
      \     '_': {
      \       'matchers': ['matcher_substring'],
      \     },
      \   },
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \   }
      \ })
<
==============================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:noet:
